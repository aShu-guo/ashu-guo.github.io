import{_ as n,o as s,c as a,b as e}from"./app-a46f6870.js";const p={},t=e(`<p>1.元字符</p><p>2.重复限定符</p><p>3.分组：()</p><p>4.转义：\\</p><p>5.条件或：|</p><p>6.区间：[]表示区间条件，被包裹的特殊字符不表示正则中的元字符</p><p>7.捕获组？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">regexp</span><span class="token operator">:</span>\\<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">^</span>\\<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>\\<span class="token punctuation">]</span>
     
<span class="token comment">// 2021年11月01日 YYYY年mm月dd日</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h4 id="等价" tabindex="-1"><a class="header-anchor" href="#等价" aria-hidden="true">#</a> 等价</h4></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span>特殊字符 <span class="token operator">?</span> 与 <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span> 是相等的，它们都代表着： <span class="token number">0</span>个或<span class="token number">1</span>个前面的内容 或 前面的内容是可选的 。
<span class="token number">2.</span>特殊字符 <span class="token operator">*</span> 与 <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">}</span> 是相等的，它们都代表着 <span class="token number">0</span> 个或多个前面的内容 。
<span class="token number">3.</span>特殊字符 <span class="token operator">+</span> 与 <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span> 是相等的，表示 <span class="token number">1</span> 个或多个前面的内容 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h4 id="规则" tabindex="-1"><a class="header-anchor" href="#规则" aria-hidden="true">#</a> 规则</h4></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span> 匹配<span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>的字符<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token operator">^</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>匹配非<span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>的任意字符
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><h4 id="string-replace" tabindex="-1"><a class="header-anchor" href="#string-replace" aria-hidden="true">#</a> string replace</h4></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">replace</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>replacement<span class="token punctuation">)</span>
pattern 可以是字符串，也可以是正则表达式
replacement 可以是字符串，也可以是函数
	如果是函数时，第一个参数是匹配模式的字符串，后面的参数是子表达式匹配的字符串
  返回值是替换字符串
  
例子：
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;&lt;p&gt;&lt;img style=&quot;width: 604px;&quot; src=&quot;http://xxts-fm-oss.dingtax.cn/test/id9ee2f73d7e4243b6b25e6681f7d525fb.png&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&#39;</span>
str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;img.*?(style=&quot;[^&quot;]*&quot;).*?(src=&quot;[^&quot;]*&quot;).*?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>output：</p><p>![image-20220107111935390](/Users/ifugle/Library/Application Support/typora-user-images/image-20220107111935390.png)</p>`,16),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","regexp.html.vue"]]);export{r as default};
