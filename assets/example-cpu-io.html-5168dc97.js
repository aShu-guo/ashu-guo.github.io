const e=JSON.parse('{"key":"v-e1f04d32","path":"/server/nest/example-cpu-io.html","title":"cpu密集型与io密集型","lang":"zh-CN","frontmatter":{"description":"cpu密集型：大量计算 io密集型：大量输入/输出 CPU密集型本身就不适合nodejs，但非常适合大量io操作的情况。 假设一个请求流程是10ms的简单运算，生成sql语句，900ms的数据库查询并返回。90ms的数据数据并返回。完整时间是1s。 java处理 如果是1000个请求，不在考虑数据库压力的情况下，理论上java会并发产生1000个线程来...","head":[["link",{"rel":"canonical","href":"https://ashu-guo.github.io/vue-ecology/rfcs/server/nest/example-cpu-io.html"}],["meta",{"property":"og:url","content":"https://ashu-guo.github.io/server/nest/example-cpu-io.html"}],["meta",{"property":"og:site_name","content":"aShu_guo技术博客"}],["meta",{"property":"og:title","content":"cpu密集型与io密集型"}],["meta",{"property":"og:description","content":"cpu密集型：大量计算 io密集型：大量输入/输出 CPU密集型本身就不适合nodejs，但非常适合大量io操作的情况。 假设一个请求流程是10ms的简单运算，生成sql语句，900ms的数据库查询并返回。90ms的数据数据并返回。完整时间是1s。 java处理 如果是1000个请求，不在考虑数据库压力的情况下，理论上java会并发产生1000个线程来..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-11T07:59:20.000Z"}],["meta",{"property":"article:author","content":"ashu_guo"}],["meta",{"property":"article:modified_time","content":"2023-08-11T07:59:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"cpu密集型与io密集型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-11T07:59:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ashu_guo\\",\\"url\\":\\"http://ashu-guo.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"java处理","slug":"java处理","link":"#java处理","children":[]},{"level":2,"title":"nodejs处理","slug":"nodejs处理","link":"#nodejs处理","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1691740760000,"contributors":[{"name":"aShu-guo","email":"guochengli97@163.com","commits":1}]},"filePathRelative":"server/nest/example-cpu-io.md","autoDesc":true,"copyright":{"author":"ashu_guo","license":"MIT"}}');export{e as data};
