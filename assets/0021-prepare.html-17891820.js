import{_ as a,o as n,c as s,b as t}from"./app-a46f6870.js";const e={},p=t(`<h1 id="准备篇" tabindex="-1"><a class="header-anchor" href="#准备篇" aria-hidden="true">#</a> 准备篇</h1><h2 id="router-link组件用法" tabindex="-1"><a class="header-anchor" href="#router-link组件用法" aria-hidden="true">#</a> router-link组件用法</h2><p>基于vue-router-3.x</p><p>router-link为提供了改变路由重新挂载组件的能力以及为自定义组件提供导航能力，当没有传入默认插槽时，默认渲染为<code>&lt;a&gt;</code>标签。</p><h2 id="与-a-标签的区别是什么" tabindex="-1"><a class="header-anchor" href="#与-a-标签的区别是什么" aria-hidden="true">#</a> 与<code>&lt;a&gt;</code>标签的区别是什么？</h2><p><code>&lt;a&gt;</code>标签提供的能力是整体刷新页面，从一个页面链接到另外一个页面，但两个页面的布局相同，改变的只有内容区域时，那么<code>&lt;a&gt;</code> 标签跳转便会造成不必要的渲染性能损耗。</p><p><code>router-link</code>组件提供了局部更新页面内容的能力，当路由发生改变时，重新挂载要跳转路由对应的组件。</p><p>而且从官方文档上可知，还有以下3点不同：</p><ul><li><code>router-link</code>组件在history模式和hash模式下行为一致，无需由于兼容性降级为hash模式时修改代码</li><li>history模式下，<code>router-link</code>会阻止默认事件触发，并不会重新加载页面。</li><li>实例化history模式下router时，如果指定了base，那么props <code>to</code>无需指定项目基础路径</li></ul><h2 id="为组件提供导航能力-3-1新增" tabindex="-1"><a class="header-anchor" href="#为组件提供导航能力-3-1新增" aria-hidden="true">#</a> 为组件提供导航能力（3.1新增）</h2><h3 id="之前" tabindex="-1"><a class="header-anchor" href="#之前" aria-hidden="true">#</a> 之前</h3><p>在没有新增默认作用域插槽时，虽然提供了tag来指定组件渲染，但是由于router-link并不是函数式组件，所以并不支持自定义组件渲染的能力。</p><p>而且由于将router-link重构为函数式组件是重大变更，在vue3版本中也调整了函数式组件的API，废弃了functional选项声明，故尤大提供了另外一方方式：声明v-slot</p><div class="custom-container tip"><p class="custom-container-title">译者注</p><p>为什么改为函数式组件就可以实现支持自定义组件的能力了呢？</p><p><strong>需要研究下函数式组件实例化时和普通组件有什么区别？</strong></p></div><h3 id="之后" tabindex="-1"><a class="header-anchor" href="#之后" aria-hidden="true">#</a> 之后</h3><p>添加<code>custom</code>，并传入默认插槽</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">custom</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ href, navigate, isActive }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ &#39;active&#39;: isActive }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>href<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>navigate<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Icon</span><span class="token punctuation">&gt;</span></span>home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Icon</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xs-hidden<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么是锚点" tabindex="-1"><a class="header-anchor" href="#什么是锚点" aria-hidden="true">#</a> 什么是锚点？</h2><p>超链接的一种表现形式，用于页面内跳转</p>`,19),o=[p];function c(l,u){return n(),s("div",null,o)}const r=a(e,[["render",c],["__file","0021-prepare.html.vue"]]);export{r as default};
