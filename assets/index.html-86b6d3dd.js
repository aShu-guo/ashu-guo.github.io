import{_ as e,o as a,c as d,b as t}from"./app-a46f6870.js";const c={},r=t('<h1 id="ts-入门" tabindex="-1"><a class="header-anchor" href="#ts-入门" aria-hidden="true">#</a> ts 入门</h1><h2 id="鸭子类型" tabindex="-1"><a class="header-anchor" href="#鸭子类型" aria-hidden="true">#</a> 鸭子类型</h2><p>程序设计可以分为静态类型（编译时检查）和动态类型（运行时检查），而鸭子类型是静态类型的一种风格。关注的是<code>属性和方法</code> 的集合，而不是继承特定的类和实现特定的接口。</p><p>动态类型的编程语言只能<code>依赖文档</code>、<code>清晰的代码</code>和<code>测试</code>来确保正常使用，代码的执行结果只有在运行之后才可以明确知道。</p><p>在ts中判断两个类型是否相同是根据它们的结构，如果结构相同便认为它们是同一类型。</p><p>例如：</p><p>如果一只鸟可以通过鸭子测试：当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。</p><h2 id="类型擦除" tabindex="-1"><a class="header-anchor" href="#类型擦除" aria-hidden="true">#</a> 类型擦除</h2><p>ts编译之后的产物是不包含类型声明的，因为ES6并不支持类型声明，而且浏览器也无法直接运行ts的代码</p><h2 id="自动推断" tabindex="-1"><a class="header-anchor" href="#自动推断" aria-hidden="true">#</a> 自动推断</h2><p>ts的推断变量的类型是通过<code>变量的值</code></p><h2 id="降级" tabindex="-1"><a class="header-anchor" href="#降级" aria-hidden="true">#</a> 降级</h2><p>ts编译产物的默认target是<code>ES3</code>，目的是为了更好的兼容性，当然也可以通过<code>--target ES2015</code>指定编译产物对应的ES版本</p>',13),h=[r];function o(s,i){return a(),d("div",null,h)}const p=e(c,[["render",o],["__file","index.html.vue"]]);export{p as default};
