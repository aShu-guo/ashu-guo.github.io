import{_ as e,o as a,c as d,b as t}from"./app-a46f6870.js";const n={},r=t('<h1 id="外键" tabindex="-1"><a class="header-anchor" href="#外键" aria-hidden="true">#</a> 外键</h1><p>约束两个有引用关系的表，保证数据的正确性。</p><p>外键由两部分组成：包含外键字段默认值的父表和引用外键字段值的子表。外键是定义在子表上的。</p><h2 id="on-update-on-delete" tabindex="-1"><a class="header-anchor" href="#on-update-on-delete" aria-hidden="true">#</a> on update &amp;&amp; on delete</h2><p>父表update或者delete数据时，子表中引用相匹配外键值的数据行的行为</p><h3 id="cascade" tabindex="-1"><a class="header-anchor" href="#cascade" aria-hidden="true">#</a> CASCADE</h3><p>父表update或者delete数据时，子表也对应的update或者delete。需要注意的是在两表中不要在与外键包含的字段上定义多个on update和on delete，否则会造成多次触发。</p><p>如果父表和子表都定义了外键，而且外键中包含相同的字段，则需要定义相同的on update和on delete来保证操作成功。</p><h3 id="set-null" tabindex="-1"><a class="header-anchor" href="#set-null" aria-hidden="true">#</a> SET NULL</h3><p>父表update或者delete数据时，子表设置数据为null。如果指定了设置null的行为，则需要保证子表的字段可以为null</p><h3 id="restrict" tabindex="-1"><a class="header-anchor" href="#restrict" aria-hidden="true">#</a> RESTRICT</h3><p>子表忽略父表update或者delete数据的行为</p><h3 id="no-action" tabindex="-1"><a class="header-anchor" href="#no-action" aria-hidden="true">#</a> NO ACTION</h3><p>默认操作，InnoDB引擎下与<code>RESTRICT</code>效果相同，会立刻阻止父表操作带来的影响。</p><h3 id="set-default" tabindex="-1"><a class="header-anchor" href="#set-default" aria-hidden="true">#</a> SET DEFAULT</h3>',15),h=[r];function i(o,c){return a(),d("div",null,h)}const s=e(n,[["render",i],["__file","foreign-key.html.vue"]]);export{s as default};
