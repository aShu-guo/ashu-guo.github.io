import{_ as e,o as a,c as i,b as l}from"./app-a46f6870.js";const o="/imgs/animation/vue-transition.png",r={},d=l('<h1 id="准备篇" tabindex="-1"><a class="header-anchor" href="#准备篇" aria-hidden="true">#</a> 准备篇</h1><h2 id="什么是transition" tabindex="-1"><a class="header-anchor" href="#什么是transition" aria-hidden="true">#</a> 什么是Transition</h2><p>Vue2内置的提供动画功能的组件，在四种状态下提供过渡动画：</p><ul><li>v-if</li><li>v-show</li><li>动态组件</li><li>组件根结点</li></ul><h2 id="提供了那些hook和内置类名" tabindex="-1"><a class="header-anchor" href="#提供了那些hook和内置类名" aria-hidden="true">#</a> 提供了那些Hook和内置类名？</h2><p>当没有指定<code>&lt;Transition&gt;</code>的<code>name</code>props时，默认类名前缀为<code>v-</code>。并且内置了以下类型：</p><ul><li><p>v-enter：进入过渡的开始状态</p></li><li><p>v-enter-active：进入过渡时的状态</p></li><li><p>v-enter-to：进入过渡的结束状态，在元素被插入DOM之后的下一帧生效，并移除v-enter</p></li><li><p>v-leave：离开过渡的开始状态</p></li><li><p>v-leave-active：离开过渡生效的状态</p></li><li><p>v-leave-to：离开过渡的结束状态</p><p><img src="'+o+'" alt="img.png"></p></li></ul><p>也可以不按照Vue约定的规范使用<code>前缀+自定义类名</code>的风格，用户可以通过<code>&lt;Transition&gt;</code>的props指定：</p><ul><li>enter-class</li><li>enter-active-class</li><li>enter-to-class (2.1.8+)</li><li>leave-class</li><li>leave-active-class</li><li>leave-to-class (2.1.8+)</li></ul><h2 id="可以管理哪些情况下的过渡" tabindex="-1"><a class="header-anchor" href="#可以管理哪些情况下的过渡" aria-hidden="true">#</a> 可以管理哪些情况下的过渡</h2><h3 id="单个元素或者组件的过渡" tabindex="-1"><a class="header-anchor" href="#单个元素或者组件的过渡" aria-hidden="true">#</a> 单个元素或者组件的过渡</h3><p>常规用法即可：指定name，添加对应name的类名</p><h3 id="初始渲染的过渡" tabindex="-1"><a class="header-anchor" href="#初始渲染的过渡" aria-hidden="true">#</a> 初始渲染的过渡</h3><p>设置节点初始渲染的过渡，需要首先添加<code>appear</code>props</p><p>可以通过两种方式：</p><ol><li>指定类名（这里进入过渡和离开过渡的类名相同）</li></ol><ul><li>appear-class</li><li>appear-to-class</li><li>appear-active-class</li></ul><ol start="2"><li>指定钩子</li></ol><ul><li>v-on:before-appear</li><li>v-on:appear</li><li>v-on:after-appear</li><li>v-on:appear-cancelled</li></ul><h3 id="多个元素的过渡" tabindex="-1"><a class="header-anchor" href="#多个元素的过渡" aria-hidden="true">#</a> 多个元素的过渡</h3><p>用于<code>v-if/v-else</code>切换的元素，但是对于相同标签名的元素切换时需要指定key</p><h4 id="过渡时元素为什么会同时出现" tabindex="-1"><a class="header-anchor" href="#过渡时元素为什么会同时出现" aria-hidden="true">#</a> 过渡时元素为什么会同时出现？</h4><p>因为在过渡时，一个元素的离开过渡和另一个元素的进入过渡会同时重绘，即<strong>进入和离开同时发生</strong></p><p>解决这个问题，可以通过</p><ol><li>两个元素在相同的位置上</li><li>使用transform做转换</li><li>指定过渡模式：添加<code>mode</code>props</li></ol><ul><li>in-out：新元素先进行过渡，完成之后当前元素过渡离开。</li><li>out-in：当前元素先进行过渡，完成之后新元素过渡进入。</li></ul><h3 id="多个组件的过渡" tabindex="-1"><a class="header-anchor" href="#多个组件的过渡" aria-hidden="true">#</a> 多个组件的过渡</h3><p>通过动态组件实现，无需指定<code>key</code></p><h3 id="列表的过渡-多节点的过渡" tabindex="-1"><a class="header-anchor" href="#列表的过渡-多节点的过渡" aria-hidden="true">#</a> 列表的过渡（多节点的过渡）</h3><p><code>&lt;transition-group&gt;</code>相对于<code>&lt;transition&gt;</code>的有以下不同：</p><ol><li>它可以改变定位<code>transform</code></li><li>过渡模式不可用，无法指定<code>mode</code></li><li>内部需要指定唯一的key</li><li>会以真实的DOM出现，默认是<code>&lt;span&gt;</code>，当然也可以通过<code>tag</code>props指定</li></ol><h4 id="如何平滑的过渡列表" tabindex="-1"><a class="header-anchor" href="#如何平滑的过渡列表" aria-hidden="true">#</a> 如何平滑的过渡列表</h4><p>新增v-move类名，当然也可以指定<code>move-class</code>来添加<code>transform</code>属性的过渡状态，用于支持添加进行过渡时的样式。</p>',33),t=[d];function c(n,s){return a(),i("div",null,t)}const h=e(r,[["render",c],["__file","0017-prepare.html.vue"]]);export{h as default};
