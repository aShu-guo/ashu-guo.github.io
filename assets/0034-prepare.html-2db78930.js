import{_ as n,o as a,c as s,b as e}from"./app-a46f6870.js";const t={},o=e(`<h1 id="准备篇" tabindex="-1"><a class="header-anchor" href="#准备篇" aria-hidden="true">#</a> 准备篇</h1><h2 id="之前-v4之前-是如何使用内置组件-transition、router-view、component的" tabindex="-1"><a class="header-anchor" href="#之前-v4之前-是如何使用内置组件-transition、router-view、component的" aria-hidden="true">#</a> 之前（v4之前）是如何使用内置组件：transition、router-view、component的？</h2><p><code>router-view</code>作为页面组件的占位，可以被<code>keep-alive</code>、<code>transition</code>包裹。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="router-view" tabindex="-1"><a class="header-anchor" href="#router-view" aria-hidden="true">#</a> router-view</h2><p>在vue-router v3之前，它是函数式组件，即无状态的。但是在函数式组件在vue3中变更：</p><ul><li>移除<code>functional</code>选项，不再支持对象格式的<code>{ functional: true }</code>。</li><li>SFCs不再支持<code>&lt;template functional&gt;</code>-如果你想要使用组件中的任意选项而不单是一个函数，那么请使用普通组件。</li><li>函数入参发生改变： <ul><li><code>h</code>现在通过全局导出</li><li>函数接收两个参数：<code>props</code>和一个暴露出<code>slots</code>, <code>attrs</code>和<code>emit</code>属性的上下文对象。等价于有状态组件中的带<code>$</code>属性的等价物。</li></ul></li></ul><p>那么意味着vue3中的函数式组件是有状态的，而且有自己的依赖收集，这在vue2中不同。</p>`,8),c=[o];function i(p,l){return a(),s("div",null,c)}const r=n(t,[["render",i],["__file","0034-prepare.html.vue"]]);export{r as default};
