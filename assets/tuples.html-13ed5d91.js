import{_ as n,o as s,c as a,b as t}from"./app-a46f6870.js";const e="/imgs/typescript/tuples-auto-complete.png",p="/imgs/typescript/array-to-tuple.png",o="/imgs/typescript/array-to-tuple-2.png",c={},i=t(`<h1 id="元组" tabindex="-1"><a class="header-anchor" href="#元组" aria-hidden="true">#</a> 元组</h1><p>一个指定预定义长度和每个索引对应值的类型的数组</p><h2 id="类型声明" tabindex="-1"><a class="header-anchor" href="#类型声明" aria-hidden="true">#</a> 类型声明</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 正确的语法</span>
<span class="token keyword">const</span> tuples<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>

<span class="token comment">// 错误的语法</span>
<span class="token keyword">const</span> tuples2<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token comment">// Error: Type &#39;[string, number, number]&#39; is not assignable to type &#39;[string, number]&#39;.</span>
<span class="token comment">//     Source has 3 element(s) but target allows only 2.ts(2322)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更加通用的元组声明" tabindex="-1"><a class="header-anchor" href="#更加通用的元组声明" aria-hidden="true">#</a> 更加通用的元组声明</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Tuples</span> <span class="token operator">=</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="只读" tabindex="-1"><a class="header-anchor" href="#只读" aria-hidden="true">#</a> 只读</h2><p>像数组一样使用<code>readonly</code>限制变量操作，而且最佳实践是将元组设置为只读的</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> tuples<span class="token operator">:</span> <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
tuples<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+e+`" alt="img.png"></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>React中<code>userState()</code>调用结果便是一个value和设置value的函数组成的元组</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">userState</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h2 id="可选" tabindex="-1"><a class="header-anchor" href="#可选" aria-hidden="true">#</a> 可选</h2><p>通过<code>?</code>标记元组中的某个元素是可选的</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyTuple</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">?</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> a<span class="token operator">:</span> MyTuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解构" tabindex="-1"><a class="header-anchor" href="#解构" aria-hidden="true">#</a> 解构</h2><p>在约定式的API中用处更大</p><h3 id="具名解构" tabindex="-1"><a class="header-anchor" href="#具名解构" aria-hidden="true">#</a> 具名解构</h3><p>为元组中的每个index的值赋予name，语法等价于js中解构数组</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> graph<span class="token operator">:</span> <span class="token punctuation">[</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">55.2</span><span class="token punctuation">,</span> <span class="token number">41.3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以为元组中包含的值提供更多的上下文信息，例如</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> coord<span class="token operator">:</span> <span class="token punctuation">[</span>longitude<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> latitude<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">120.3</span><span class="token punctuation">,</span> <span class="token number">30.22</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="数组转为元组" tabindex="-1"><a class="header-anchor" href="#数组转为元组" aria-hidden="true">#</a> 数组转为元组</h2><p>使用<code>as const</code>可以将数组类型转化为元组类型，它更加通用的用法是转换为文字类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 此时类型为：string[]</span>
<span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;CREATE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;READ&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;UPDATE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DELETE&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+p+`" alt="img.png"></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 此时类型为：readonly [&quot;CREATE&quot;, &quot;READ&quot;, &quot;UPDATE&quot;, &quot;DELETE&quot;]</span>
<span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;CREATE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;READ&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;UPDATE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DELETE&quot;</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+o+`" alt="img.png"></p><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h2><h3 id="函数参数列表" tabindex="-1"><a class="header-anchor" href="#函数参数列表" aria-hidden="true">#</a> 函数参数列表</h3><p>声明一个包含不固定参数的函数，函数名为<code>readButtonInput</code>，其中前2个参数的类型分别为<code>string</code>，<code>number</code>，剩余参数均为<code>boolean</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">readButtonInput</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> version<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token operator">...</span>input<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更加抽象的声明，在库开发中常用</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">readButtonInput</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> version<span class="token punctuation">,</span> input<span class="token punctuation">]</span> <span class="token operator">=</span> args
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33),l=[i];function u(r,d){return s(),a("div",null,l)}const m=n(c,[["render",u],["__file","tuples.html.vue"]]);export{m as default};
