import{_ as e,o as a,c as i,b as r}from"./app-a46f6870.js";const d={},t=r(`<h1 id="api版本" tabindex="-1"><a class="header-anchor" href="#api版本" aria-hidden="true">#</a> api版本</h1><ol><li>对于break change，api生产者会内部变更api版本，api消费者可以自行决定是继续使用当前版本，还是迁移到最新版本，可以更好的渐进式开发。</li><li>对于微服务架构而言，添加api版本可以有效解决接口杂乱、不可追溯问题，并且让接口具备更强的可扩展性、可靠性和灵活性。</li></ol><p>综上可知，添加版本控制对于api消费者是友好的，但是api生产者的成本更高。所以就成本收益而言，我认为对于需要对外暴露出的api应该使用<code>version</code> 控制，但是对于公司内部非底层的服务无需使用。</p><p>如何保证多个不同版本可以共存？</p><p>可以通过不同分支实现，这对于分支维护也是一个挑战。</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><p>有多种方式可以添加api版本</p><h3 id="通过路由-params" tabindex="-1"><a class="header-anchor" href="#通过路由-params" aria-hidden="true">#</a> 通过路由-params</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>https://www.test.com/api/1/catalog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="通过请求-query" tabindex="-1"><a class="header-anchor" href="#通过请求-query" aria-hidden="true">#</a> 通过请求-query</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>https://www.test.com/api/catalog?version=1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="自定义header" tabindex="-1"><a class="header-anchor" href="#自定义header" aria-hidden="true">#</a> 自定义header</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Curl -H &quot;accepts-versions: 1:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="gateway" tabindex="-1"><a class="header-anchor" href="#gateway" aria-hidden="true">#</a> gateway</h2><p>网关作为service和client的中间层，是所有微服务的入口，中心化的统一处理认证、限制请求频率、预防攻击等问题。</p><p>允许多个版本的service共存，防止未迁移api消费者失效。</p><p>如果api版本变更时，网关会自动路由到指定end point，当api消费者没有迁移到最新版本时会自动降级到兼容版本。虽然允许api消费者非必须迁移，但是应提醒api消费者尽可能去迁移，如：提供最后支持时间。</p>`,17),s=[t];function n(c,l){return a(),i("div",null,s)}const h=e(d,[["render",n],["__file","api-version.html.vue"]]);export{h as default};
