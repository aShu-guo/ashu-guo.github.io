import{_ as n,o as s,c as a,b as e}from"./app-a46f6870.js";const p="/imgs/typescript/union-types.png",t={},c=e(`<h1 id="联合类型" tabindex="-1"><a class="header-anchor" href="#联合类型" aria-hidden="true">#</a> 联合类型</h1><p>当变量包含多个类型时使用联合类型，当使用联合类型时，ts只会只能提示联合类型中所有类型<code>共有</code>的属性。</p><p>设计联合类型的原则：首先声明meta类型，后再组合为联合类型</p><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h2><p>使用<code>|</code>表示：可能是...，又可能是...，又可能是...</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>
a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+p+`" alt="img.png"></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>在未使用ts的vue中声明props时：<code>id: { type: [String, Number], required: true }</code>，注意不要与ts联合类型语法混淆了。</p></div><h2 id="类型收敛" tabindex="-1"><a class="header-anchor" href="#类型收敛" aria-hidden="true">#</a> 类型收敛</h2><p>如果未声明meta类型，而直接声明<code>interface</code>来等价于组合类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    kind<span class="token operator">:</span> <span class="token string">&#39;circle&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;square&#39;</span><span class="token punctuation">,</span><span class="token comment">// 根据kind属性判断Shape是哪种类型</span>
    radius<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token comment">// 必须设置为可选的，因为square类型并没有半径</span>
    sideLength<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token comment">// 必须设置为可选的，因为circle类型并没有边框</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在调用计算面积函数时，需要区分不同的kind添加不同的计算逻辑，但是由于每个kind包含的属性不同，所以又必须在添加计算逻辑时将独有的属性断言为一定存在的。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span>shape<span class="token operator">:</span> Shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// oops!</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shape<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&quot;circle&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> shape<span class="token punctuation">.</span>radius<span class="token operator">!</span> <span class="token operator">**</span> <span class="token number">2</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这并不安全。</p><p>如果设计Shape时，首先声明不同类型的interface，后组成联合类型便不会出现上述问题：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>
    kind<span class="token operator">:</span> <span class="token string">&quot;circle&quot;</span><span class="token punctuation">;</span>
    radius<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span>
    kind<span class="token operator">:</span> <span class="token string">&quot;square&quot;</span><span class="token punctuation">;</span>
    sideLength<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Shape</span> <span class="token operator">=</span> Circle <span class="token operator">|</span> Square<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在调用计算面积函数时，便可以根据<code>kind</code>添加不同计算逻辑</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span>shape<span class="token operator">:</span> Shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>shape<span class="token punctuation">.</span>kind<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">&quot;circle&quot;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> shape<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&quot;square&quot;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> shape<span class="token punctuation">.</span>sideLength <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以在设计联合类型时需要遵循：首先声明meta类型，后再组合为联合类型</p>`,19),o=[c];function i(l,r){return s(),a("div",null,o)}const d=n(t,[["render",i],["__file","union-types.html.vue"]]);export{d as default};
