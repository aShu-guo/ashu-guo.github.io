import{_ as e,r as t,o as p,c as o,a as c,d as n,e as i,w as l,b as s}from"./app-a46f6870.js";const r={},u=s(`<h1 id="异步组件api" tabindex="-1"><a class="header-anchor" href="#异步组件api" aria-hidden="true">#</a> 异步组件api</h1><h2 id="概览" tabindex="-1"><a class="header-anchor" href="#概览" aria-hidden="true">#</a> 概览</h2><p>介绍一个定义异步组件的API。</p><h2 id="基础用例" tabindex="-1"><a class="header-anchor" href="#基础用例" aria-hidden="true">#</a> 基础用例</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>defineAsyncComponent<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>

<span class="token comment">// simple usage</span>
<span class="token keyword">const</span> AsyncFoo <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./Foo.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// with options</span>
<span class="token keyword">const</span> AsyncFooWithOptions <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 加载函数</span>
    <span class="token function-variable function">loader</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./Foo.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">loadingComponent</span><span class="token operator">:</span> LoadingComponent<span class="token punctuation">,</span>
    <span class="token literal-property property">errorComponent</span><span class="token operator">:</span> ErrorComponent<span class="token punctuation">,</span>
    <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
    <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">3000</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="动机" tabindex="-1"><a class="header-anchor" href="#动机" aria-hidden="true">#</a> 动机</h2>`,6),d=s(`<h2 id="详细设计" tabindex="-1"><a class="header-anchor" href="#详细设计" aria-hidden="true">#</a> 详细设计</h2><h3 id="简单用法" tabindex="-1"><a class="header-anchor" href="#简单用法" aria-hidden="true">#</a> 简单用法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>defineAsyncComponent<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>

<span class="token comment">// simple usage</span>
<span class="token keyword">const</span> AsyncFoo <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./Foo.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>defineAsyncComponent</code>可以接收一个返回<code>promise</code>对象并<code>resolve</code>出对应组件的<code>loader</code>函数。</p><ul><li>如果解析的是一个ES模块，那么模块的<code>default</code>导出会被解析为实际的组件。</li><li>与2.x版本的不同点：注意loader函数是没有resolve和reject入参的，而是必须返回一个<code>promise</code>对象</li></ul><p>对于loader函数中需要依赖自定义resolve和reject的代码，下面的对比是直接的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 之前</span>
<span class="token keyword">const</span> <span class="token function-variable function">Foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">// 之后</span>
<span class="token keyword">const</span> Foo <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他使用方式" tabindex="-1"><a class="header-anchor" href="#其他使用方式" aria-hidden="true">#</a> 其他使用方式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>defineAsyncComponent<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>

<span class="token keyword">const</span> AsyncFooWithOptions <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">loader</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./Foo.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">loadingComponent</span><span class="token operator">:</span> LoadingComponent<span class="token punctuation">,</span>
    <span class="token literal-property property">errorComponent</span><span class="token operator">:</span> ErrorComponent<span class="token punctuation">,</span>
    <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token comment">// default: 200</span>
    <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token comment">// default: Infinity</span>
    <span class="token literal-property property">suspensible</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// default: true</span>
    <span class="token function">onError</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> retry<span class="token punctuation">,</span> fail<span class="token punctuation">,</span> attempts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">fetch</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> attempts <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">retry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>delay</code>和<code>timeout</code>功能和vue2保持一致。</li></ul><h4 id="与2-x版本的不同之处" tabindex="-1"><a class="header-anchor" href="#与2-x版本的不同之处" aria-hidden="true">#</a> 与2.x版本的不同之处：</h4><ul><li>component属性被换成了loader属性，接收一个与简单用例中一致的函数。</li><li>在2.x版本，带有选项的异步组件被定义为：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    component<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Component<span class="token operator">&gt;</span>
    <span class="token comment">// ...other options</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在3.x版本变成了这样：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">loader</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Component<span class="token operator">&gt;</span>
    <span class="token comment">// ...other options</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>2.x版本的<code>loading</code>和<code>error</code>属性名被更改为了<code>loadingComponent</code>和<code>errorComponent</code>表达的更为准确。</li></ul><h3 id="重试开关" tabindex="-1"><a class="header-anchor" href="#重试开关" aria-hidden="true">#</a> 重试开关</h3><p>这个新的<code>onError</code>选项提供了一个由于loader函数抛出异常自定义重试行为的hook</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Foo <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token function">onError</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> retry<span class="token punctuation">,</span> fail<span class="token punctuation">,</span> attempts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">fetch</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> attempts <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// retry on fetch errors, 3 max attempts</span>
            <span class="token function">retry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意retry/fail类似于promise对象中的resolve/reject：在处理错误时，它们之中的一个必须被调用才可以继续。</p><h3 id="与suspense一起使用" tabindex="-1"><a class="header-anchor" href="#与suspense一起使用" aria-hidden="true">#</a> 与Suspense一起使用</h3><p>在3.x版本中的异步组件默认是<code>suspensible</code> 。这意味着如果在父组件链中存在<code>&lt;Suspense&gt;</code>组件，那么它将会被认为是<code>&lt;Suspense&gt;</code> 组件的异步依赖。这种情况下，它的loading状态将会由<code>&lt;Suspense&gt;</code>控制，它自己的<code>loading</code>、<code>error</code>、<code>delay</code>、<code>timeout</code>将会被忽略。</p><p>当然它也可以选择退出<code>&lt;Suspense&gt;</code>的控制，通过指定<code>suspensible:false</code>来自行控制loading状态。</p><h2 id="采取的策略" tabindex="-1"><a class="header-anchor" href="#采取的策略" aria-hidden="true">#</a> 采取的策略</h2><ul><li>语法转换是重复性的，可以通过一个代码模板演示。其中最大的挑战是如何判断哪个纯函数应该作为异步组件对待。一些基本的启发： <ul><li>返回动态导入<code>.vue</code>文件的箭头函数</li><li>动态导出返回带有<code>component</code>属性的箭头函数</li></ul></li></ul><p>注意这并不能100%覆盖</p><ul><li>在兼容版本中，应该尽可能去检查函数式组件的返回值并且警告遗留的异步组件用法。这应该能覆盖所有的基于<code>promise</code>的用例</li><li>唯一无法在2.x版本被轻易检查出的用例是使用<code>resolve/reject</code>，而不是返回一个<code>promise</code>对象。此类情况需要手动升级，但这种情况应该相对较少。</li></ul>`,27);function k(m,v){const a=t("RouterLink");return p(),o("div",null,[u,c("p",null,[n("根据"),i(a,{to:"/framework/vue-ecology/rfcs/0008-render-function-api-change.html"},{default:l(()=>[n("RFC-008")]),_:1}),n("介绍的那样，在vue3中，纯函数将会被当作函数式组件对待。异步组件必须明确通过API函数定义。")]),d])}const h=e(r,[["render",k],["__file","0026-async-component-api.html.vue"]]);export{h as default};
