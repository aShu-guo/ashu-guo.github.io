import{_ as a,o as e,c as r,b as t}from"./app-a46f6870.js";const i="/imgs/animation/perspective.png",l={},s=t(`<h1 id="transform" tabindex="-1"><a class="header-anchor" href="#transform" aria-hidden="true">#</a> transform</h1><p>通过transform，我们可以移动、旋转、放缩、倾斜DOM元素。</p><h2 id="有哪些方法" tabindex="-1"><a class="header-anchor" href="#有哪些方法" aria-hidden="true">#</a> 有哪些方法？</h2><h3 id="transform-2d" tabindex="-1"><a class="header-anchor" href="#transform-2d" aria-hidden="true">#</a> transform 2d</h3><ul><li>移动：translate、translateX、translateY、translateZ</li><li>旋转：rotate</li><li>放缩：scale、scaleX、scaleY</li><li>倾斜：skew、skewX、skewY</li><li>matrix：可以同时添加上述值到transform属性上</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>matrix(scaleX(), skewY(), skewX(), scaleY(), translateX(), translateY())
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="transform-3d" tabindex="-1"><a class="header-anchor" href="#transform-3d" aria-hidden="true">#</a> transform 3d</h3><ul><li>旋转：rotateX、rotateY、rotateZ</li></ul><p>3d旋转特有的属性</p><ul><li>transform-style: 表明元素的子元素是在平面中还是3D空间中 <ul><li>flat</li><li>preserve-3d</li></ul></li><li>perspective: 表明在3D空间中，元素距离用户多远，更小的值会更好的3D效果 <img src="`+i+'" alt="img.png"><ul><li>数值</li></ul></li><li>perspective-origin: 定义用户在3D空间上的哪个位置上看元素</li><li>backface-visibility: 定义元素没有正对着屏幕时是否展示（通过rotate旋转背对着屏幕）</li></ul>',10),n=[s];function d(o,c){return e(),r("div",null,n)}const h=a(l,[["render",d],["__file","transform.html.vue"]]);export{h as default};
