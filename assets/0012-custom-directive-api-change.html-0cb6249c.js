import{_ as p,r as t,o as i,c as l,a as n,d as a,e as s,w as u,b as o}from"./app-a46f6870.js";const d={},r=n("h1",{id:"自定义指令的api变更",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#自定义指令的api变更","aria-hidden":"true"},"#"),a(" 自定义指令的api变更")],-1),k=n("h2",{id:"概要",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概要","aria-hidden":"true"},"#"),a(" 概要")],-1),v=n("li",null,"重新设计自定义指令以便更好的与组件生命周期保持一致。",-1),h={href:"https://github.com/vuejs/rfcs/pull/26",target:"_blank",rel:"nofollow noopener noreferrer"},m=n("code",null,'v-bind="$attrs"',-1),b=o(`<h2 id="基础用例" tabindex="-1"><a class="header-anchor" href="#基础用例" aria-hidden="true">#</a> 基础用例</h2><h3 id="之前" tabindex="-1"><a class="header-anchor" href="#之前" aria-hidden="true">#</a> 之前</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> MyDirective <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">inserted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">componentUpdated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">unbind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="之后" tabindex="-1"><a class="header-anchor" href="#之后" aria-hidden="true">#</a> 之后</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> MyDirective <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">beforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// new</span>
    <span class="token function">unmounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="动机" tabindex="-1"><a class="header-anchor" href="#动机" aria-hidden="true">#</a> 动机</h2><p>使自定义指令hook的名字与组件声明周期保持一致。</p><h2 id="详细设计" tabindex="-1"><a class="header-anchor" href="#详细设计" aria-hidden="true">#</a> 详细设计</h2><h3 id="hook重命名" tabindex="-1"><a class="header-anchor" href="#hook重命名" aria-hidden="true">#</a> Hook重命名</h3><p>经过多次调整，现存的hook将会被重命名以更好的与组件声明周期相映射。传递给hook的参数保持不变。</p><ul><li><strong>新的</strong><code>created</code> hook（在props未应用在DOM节点上调用）</li><li><code>bind</code>变更为<code>beforeMount</code>（在props应用在DOM节点上后调用）</li><li><code>inserted</code>变更为<code>mounted</code>（在子节点插入到DOM节点上后，并且DOM节点自身已经插入到父元素上时调用）</li><li><strong>新的</strong><code>beforeUpdate</code> hook（在元素自身更新之前调用）</li><li>移除<code>update</code>，使用<code>updated</code>替代</li><li><code>componentUpdated</code>变更为<code>updated</code>（在元素自身和它的子节点更新后调用）</li><li><strong>新的</strong><code>beforeUnmounted</code> hook</li><li><code>unbind</code>变更为<code>unmounted</code></li></ul><h3 id="在组件上使用" tabindex="-1"><a class="header-anchor" href="#在组件上使用" aria-hidden="true">#</a> 在组件上使用</h3><p>在3.0中，随着代码片段的支持，组件可以潜在的拥有多个根节点。当在多根节点的组件上使用自定义指令时会造成一个问题。</p><p>为了解释在3.0版本自定义指令在组件上如何工作的细节，我们需要首先理解自定义指令在3.0中如何编译。例如一个这样的指令：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将会大概编译为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> vFoo <span class="token operator">=</span> <span class="token function">resolveDirective</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">return</span> <span class="token function">withDirectives</span><span class="token punctuation">(</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>vFoo<span class="token punctuation">,</span> bar<span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>vFoo</code>将会是用户写的指令对象，它包含像<code>mounted</code>和<code>updated</code>那样的hook。</p>`,18),f=n("code",null,"widthDirectives",-1),g=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token function">onVnodeMounted</span><span class="token punctuation">(</span><span class="token parameter">vnode</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// call vFoo.mounted(...)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果，自定义指令将会全部包含并作为VNode数据的一部分。当在组件上使用自定义指令时，这些<code>onVnodeXXX</code> hook将会作为额外的props传递给这个组件，并且体现在<code>this.$attrs</code>上。</p><p>这也意味着可以在模版中像这样直接hook到元素的生命周期，当自定义指令过于复杂时，这会很方便：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@vnodeMounted</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myHook<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这和RFC#26中讨论的关于属性透传的行为保持一致。因此，组件上自定义指令的规则将会和其他额外属性一致：完全由子组件决定在何处以及如何使用它。当子组件在内部元素上使用<code>v-bind=&quot;$attrs&quot;</code> 时，这也会应用所有自定义指令到它上面。</p><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h2><p>N/A</p><h2 id="可选的方案" tabindex="-1"><a class="header-anchor" href="#可选的方案" aria-hidden="true">#</a> 可选的方案</h2><p>N/A</p><h2 id="采取的策略" tabindex="-1"><a class="header-anchor" href="#采取的策略" aria-hidden="true">#</a> 采取的策略</h2>`,10),_=n("li",null,"重命名应该很容易在兼容构建中得到支持",-1),x=n("li",null,"模板代码也应该更直观",-1),j={href:"https://github.com/vuejs/rfcs/pull/26",target:"_blank",rel:"nofollow noopener noreferrer"},w=n("h2",{id:"未解决的问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#未解决的问题","aria-hidden":"true"},"#"),a(" 未解决的问题")],-1),D=n("p",null,"N/A",-1);function M(V,N){const e=t("ExternalLinkIcon"),c=t("RouterLink");return i(),l("div",null,[r,k,n("ul",null,[v,n("li",null,[a("在组件上使用自定义指令应遵循在"),n("a",h,[a("属性透传行为"),s(e)]),a(" 讨论中的规则。子组件可以通过"),m,a("控制它的行为。")])]),b,n("p",null,[f,a(" 返回一个包裹用户hook和作为vnode生命周期注入的hook的VNode的拷贝（参考"),s(c,{to:"/vue-ecology/rfcs/0008-render-function-api-change.html"},{default:u(()=>[a("render函数API变更")]),_:1}),a(" 的RFC获取更多细节）。")]),g,n("ul",null,[_,x,n("li",null,[a("对于在组件上使用的自定义指令，在"),n("a",j,[a("属性透传行为"),s(e)]),a("中讨论的在未使用的$attrs上的警告信息也应该适用。")])]),w,D])}const y=p(d,[["render",M],["__file","0012-custom-directive-api-change.html.vue"]]);export{y as default};
