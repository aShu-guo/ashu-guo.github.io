import{_ as n,o as s,c as a,b as e}from"./app-a46f6870.js";const t={},p=e(`<h1 id="对象类型" tabindex="-1"><a class="header-anchor" href="#对象类型" aria-hidden="true">#</a> 对象类型</h1><p>在ts中有声明对象的特殊语法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> student<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&#39;xiaoming&#39;</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token number">26</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="infer-type" tabindex="-1"><a class="header-anchor" href="#infer-type" aria-hidden="true">#</a> infer type</h2><p>像声明包含value的数组一样，如果声明了属性值，那么ts会自动推断出属性的类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&#39;xiaoming&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment">// student.name = 123 // Error: Type &#39;number&#39; is not assignable to type &#39;string&#39;.ts(2322)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可选的属性" tabindex="-1"><a class="header-anchor" href="#可选的属性" aria-hidden="true">#</a> 可选的属性</h2><p>使用<code>?</code>来表示一个属性是可选的，在赋值时ts不再强制要求属性必须有值</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Error: Property &#39;name&#39; is missing in type &#39;{ age: number; }&#39; but required in type &#39;{ name: string; age: number; }&#39;.ts(2741)</span>
<span class="token keyword">const</span> student<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    age<span class="token operator">:</span> <span class="token number">26</span>
<span class="token punctuation">}</span>

<span class="token comment">// 通过检查</span>
<span class="token keyword">const</span> student2<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    age<span class="token operator">:</span> <span class="token number">26</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="索引签名" tabindex="-1"><a class="header-anchor" href="#索引签名" aria-hidden="true">#</a> 索引签名</h2><p>可用于没有定义属性的对象</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> student<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
student<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;xiaoming&#39;</span>
<span class="token comment">// Type &#39;number&#39; is not assignable to type &#39;string&#39;.ts(2322)</span>
<span class="token comment">// student.age = 26</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也等价于ts提供的实体类型：<code>Record&lt;string,string&gt;</code></p>`,13),o=[p];function i(c,r){return s(),a("div",null,o)}const d=n(t,[["render",i],["__file","object-types.html.vue"]]);export{d as default};
