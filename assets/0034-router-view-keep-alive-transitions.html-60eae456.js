import{_ as e,r as o,o as p,c,a,d as n,e as l,b as s}from"./app-a46f6870.js";const i="/imgs/vue-rfcs/router-view-transition2.png",u="/imgs/vue-rfcs/router-view-transition.png",r={},d=s(`<h1 id="router-view-keep-alive-transition" tabindex="-1"><a class="header-anchor" href="#router-view-keep-alive-transition" aria-hidden="true">#</a> router-view &amp;&amp; keep-alive &amp;&amp; transition</h1><h2 id="概览" tabindex="-1"><a class="header-anchor" href="#概览" aria-hidden="true">#</a> 概览</h2><p>由于Vue3中函数式组件的变更，<code>RouterView</code>组件与<code>KeepAlive</code>、<code>Transition</code> 共同使用时不再是简单的被它们包裹。相反，我们需要一个方式直接提供要被<code>RouterView</code>渲染的组件。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ Component }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>transitionName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>out-in<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Component<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="动机" tabindex="-1"><a class="header-anchor" href="#动机" aria-hidden="true">#</a> 动机</h2>`,5),k={href:"https://github.com/vuejs/core/issues/906#issuecomment-611080663",target:"_blank",rel:"nofollow noopener noreferrer"},v=a("code",null,"KeepAlive",-1),g=a("code",null,"RouterView",-1),m=a("code",null,"RouterView",-1),h=a("code",null,"RouterView",-1),b=s(`<h2 id="详细设计" tabindex="-1"><a class="header-anchor" href="#详细设计" aria-hidden="true">#</a> 详细设计</h2><p>我们可以通过slot来实现：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ Component, route }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Component<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>route.params<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>Component</code>是一个可以传递给渲染函数<code>h</code>或者props <code>is</code>要求的组件。</p><p>当在route定义中定义了<code>props: true</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/users/:id&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> User<span class="token punctuation">,</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>router-view会自动将params中的id属性的值作为props传递给要渲染的组件。注意你也可不添加<code>props: true</code> 的声明，通过<code>v-bind=&quot;route.params&quot;</code>传递给组件。</p><h3 id="没有匹配到任何路由的用例" tabindex="-1"><a class="header-anchor" href="#没有匹配到任何路由的用例" aria-hidden="true">#</a> 没有匹配到任何路由的用例</h3><p>在当前的路由没有匹配到在router注册的任何record时，<code>RouteLocation</code>中<code>matched</code>数组将会是空的，而且<code>router-view</code> 并没有并没有为默认slot提供默认内容，所以不会渲染任何东西。当提供一个未匹配路由时的slot时，我们可以决定展示什么，是要显示Not Found的页面还是要显示默认行为，我们都可以做到。Component值为falsy时，不会展示任何组件：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ Component, route }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>route.matched.length &gt; 0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Component<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>Not Found<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意这与在路由表中定义捕获所有路由<code>path: &#39;/:pathMatch(.*)</code>来展示Not Found页面的行为是重复的。</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>在router-view中如此使用，没有在路由表中定义<code>path: &#39;/:pathMatch(.*)</code>更灵活。当使用前者时，由于在路由表中找不到要挂载的组件，会将整体替换v-else中的内容。 但是使用后者时，可以灵活改变Not Found组件渲染的位置。</p></div><h4 id="使用前者时" tabindex="-1"><a class="header-anchor" href="#使用前者时" aria-hidden="true">#</a> 使用前者时</h4><p><img src="`+i+'" alt="img.png"></p><h4 id="使用后者时" tabindex="-1"><a class="header-anchor" href="#使用后者时" aria-hidden="true">#</a> 使用后者时</h4><p><img src="'+u+`" alt="img.png"></p><h3 id="v-slot属性" tabindex="-1"><a class="header-anchor" href="#v-slot属性" aria-hidden="true">#</a> v-slot属性</h3><ul><li>Component：可以传递给渲染函数<code>h</code>或者props <code>is</code>要求的组件。</li><li>route：被<code>RouterView</code>渲染的标准路由<code>RouteLocationNormalized</code>。与<code>$route</code>相同，但是但允许在 JSX 中轻松进行类型化访问。</li></ul><h3 id="使用transition或者keepalive包裹routerview" tabindex="-1"><a class="header-anchor" href="#使用transition或者keepalive包裹routerview" aria-hidden="true">#</a> 使用<code>Transition</code>或者<code>KeepAlive</code>包裹<code>RouterView</code></h3><p>如果有用户意外使用<code>Transition</code>包裹<code>RouterView</code> 或者迁移项目到Vue3，我们可以抛出警告信息引导用户阅读文档并且暗示他们使用<code>v-slot</code>。</p><h3 id="同时使用transition或者keepalive" tabindex="-1"><a class="header-anchor" href="#同时使用transition或者keepalive" aria-hidden="true">#</a> 同时使用<code>Transition</code>或者<code>KeepAlive</code></h3><p>当同时使用<code>Transition</code>或者<code>KeepAlive</code>时，我们需要先使用<code>Transition</code>，后使用<code>KeepAlive</code></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RouterView</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{Component}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Transition</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeepAlive</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Component<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>KeepAlive</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Transition</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RouterView</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可替代方案" tabindex="-1"><a class="header-anchor" href="#可替代方案" aria-hidden="true">#</a> 可替代方案</h2><ul><li>使用一个类似<code>useView</code>的函数，返回<code>Component</code>和<code>attrs</code>属性，并移除<code>RouteView</code>中<code>v-slot</code>的用法</li></ul><h2 id="采取的策略" tabindex="-1"><a class="header-anchor" href="#采取的策略" aria-hidden="true">#</a> 采取的策略</h2><ul><li>将vue-router3的代码模板基于vue-router4重写。</li></ul>`,27);function q(_,w){const t=o("ExternalLinkIcon");return p(),c("div",null,[d,a("p",null,[n("如在"),a("a",k,[n("vuejs/core#906"),l(t)]),n(" 中描述的那样，我们需要一个新的API允许"),v,n("和其他组件搭配"),g,n(" 使用可以接收slot。为了实现上述的行为，我们需要用"),m,n("直接包裹要渲染的组件。唯一的方法是访问"),h,n(" 渲染的组件和传递给组件的props。")]),b])}const x=e(r,[["render",q],["__file","0034-router-view-keep-alive-transitions.html.vue"]]);export{x as default};
