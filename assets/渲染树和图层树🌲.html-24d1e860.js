import{_ as e,o as r,c as l,b as i}from"./app-a46f6870.js";const t="/imgs/renderObject树与DOM树对比.png",n="/imgs/renderObject树与renderLayer树对比.png",c="/imgs/renderObject树、renderLayer树构建顺序.png",s="/imgs/renderLayer树.png",o={},a=i('<blockquote><p>渲染树和图层树🌲</p></blockquote><ol><li>renderObject对象 ---&gt; renderObject树</li></ol><ul><li>当节点需要被渲染到页面上时，会构建一个renderObject对象，保存了绘制需要的各种信息，例如：布局信息</li><li>对于一些看不到的节点，例如：设置了display:none的节点，是不会构建renderObject对象的</li><li>renderObject对象也会构成一个树，只包含可视化节点，但是与DOM树并不是一一对应的 <img src="'+t+'" alt="img.png"></li></ul><ol start="2"><li>renderLayer树</li></ol><ul><li>webkit会为具有某些css属性或者特定的renderObject对象创建renderLayer对象</li><li>renderLayer与renderObject是一对多的关系</li><li>会构建renderLayer对象的基本规则 <ul><li>添加了css属性opacity的节点</li><li>video节点</li><li>canvas节点</li><li>节点有溢出的overflow的节点</li></ul></li></ul><p><img src="'+n+'" alt="img.png"></p><ol start="3"><li>构建顺序</li></ol><p><img src="'+c+'" alt="img.png"></p><p><img src="'+s+'" alt="img.png"></p><p>layer1与layer2会在DOM树构建之后开始构建，但是layer3是在renderObject构建完之后执行js脚本时构建的</p><p>需要判断js是否创建了canvas上下文</p>',11),_=[a];function p(d,m){return r(),l("div",null,_)}const b=e(o,[["render",p],["__file","渲染树和图层树🌲.html.vue"]]);export{b as default};
