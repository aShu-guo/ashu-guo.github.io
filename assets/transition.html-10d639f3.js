import{_ as e,r as t,o as i,c as p,a as n,d as c,e as o,b as s}from"./app-a46f6870.js";const r="/imgs/animation/timing-func.png",l="/imgs/animation/cubic-bezier.png",d="/imgs/animation/steps.gif",u={},v=s(`<h1 id="过渡-transition" tabindex="-1"><a class="header-anchor" href="#过渡-transition" aria-hidden="true">#</a> 过渡 - transition</h1><p>本文主要介绍transition的使用方法，不深入浏览器原理。</p><h2 id="它提供了什么能力" tabindex="-1"><a class="header-anchor" href="#它提供了什么能力" aria-hidden="true">#</a> 它提供了什么能力？</h2><p>允许开发者改变css属性值时更加平滑</p><h2 id="如何使用" tabindex="-1"><a class="header-anchor" href="#如何使用" aria-hidden="true">#</a> 如何使用？</h2><p>创建一个过渡状态，必须满足两点：</p><ul><li>想要添加过渡的css属性；</li><li>过渡时长。</li></ul><p>注意：如果没有指定过渡时长，那么<code>transition</code>没有效果，会立刻触发。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> width 2s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>transition</code>会从css属性<code>width</code>发生变化时开始。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div:hover</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可以设置哪些属性" tabindex="-1"><a class="header-anchor" href="#可以设置哪些属性" aria-hidden="true">#</a> 可以设置哪些属性？</h2><h3 id="transition-timing-function" tabindex="-1"><a class="header-anchor" href="#transition-timing-function" aria-hidden="true">#</a> transition-timing-function</h3><p>可以指定DOM过渡状态的速度</p><p><img src="`+r+'" alt="img.png"></p><p>提供了一些内置的过渡函数：ease、ease-in、ease-out等。也提供了另外两种函数实现自定义的过渡速度：三次贝塞尔曲线、steps函数。</p><h4 id="三次贝塞尔曲线" tabindex="-1"><a class="header-anchor" href="#三次贝塞尔曲线" aria-hidden="true">#</a> 三次贝塞尔曲线</h4><p>cubic-bezier(n1,n2,n3,n4) 三次贝塞尔曲线可以通过两个控制点来绘制，而(n1,n2)是第一个控制点的坐标，(n3,n4) 是第二个控制点的坐标。通过调整两个控制点的坐标来绘制不同的曲线。在Css中，贝塞尔曲线被放置在一个1* 1的正方形中，那么意味着n1、n2、n3、n4最大值不能超过1，但是允许负值。</p><p><img src="'+l+'" alt="img.png"></p>',19),m={href:"http://web.chacuo.net/css3beziertool",target:"_blank",rel:"nofollow noopener noreferrer"},h=s('<h4 id="steps函数" tabindex="-1"><a class="header-anchor" href="#steps函数" aria-hidden="true">#</a> steps函数</h4><p><img src="'+d+`" alt="img.png"></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
    <span class="token comment">/*跳过起始位置，到达终点过程中走4步*/</span>
    <span class="token property">transition-timing-function</span><span class="token punctuation">:</span> <span class="token function">steps</span><span class="token punctuation">(</span>4<span class="token punctuation">,</span> jump-start<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*跳过终点位置，到达起始点过程中走10步*/</span>
    <span class="token property">transition-timing-function</span><span class="token punctuation">:</span> <span class="token function">steps</span><span class="token punctuation">(</span>10<span class="token punctuation">,</span> jump-end<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*都不跳过，起始点(包含)和终点(包含)间中走20步*/</span>
    <span class="token property">transition-timing-function</span><span class="token punctuation">:</span> <span class="token function">steps</span><span class="token punctuation">(</span>20<span class="token punctuation">,</span> jump-none<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*都跳过，起始点(不包含)和终点间(不包含)中走5步*/</span>
    <span class="token property">transition-timing-function</span><span class="token punctuation">:</span> <span class="token function">steps</span><span class="token punctuation">(</span>5<span class="token punctuation">,</span> jump-both<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transition-delay" tabindex="-1"><a class="header-anchor" href="#transition-delay" aria-hidden="true">#</a> transition-delay</h3><p>延迟transition执行时间。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
    <span class="token property">transition-delay</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transition-property" tabindex="-1"><a class="header-anchor" href="#transition-property" aria-hidden="true">#</a> transition-property</h3><p>指定哪个css属性发生改变时，执行过渡状态。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
    <span class="token property">transition-property</span><span class="token punctuation">:</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> visibility<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transition-duration" tabindex="-1"><a class="header-anchor" href="#transition-duration" aria-hidden="true">#</a> transition-duration</h3><p>transition执行时长</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
    <span class="token property">transition-duration</span><span class="token punctuation">:</span> 3s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function k(b,g){const a=t("ExternalLinkIcon");return i(),p("div",null,[v,n("p",null,[n("a",m,[c("在线绘制"),o(a)])]),h])}const _=e(u,[["render",k],["__file","transition.html.vue"]]);export{_ as default};
