import{_ as i,r as p,o as l,c as u,a as s,d as n,e as a,w as t,b as o}from"./app-a46f6870.js";const r={},d=s("h1",{id:"全局api变更",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#全局api变更","aria-hidden":"true"},"#"),n(" 全局API变更")],-1),k=s("h2",{id:"概要",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#概要","aria-hidden":"true"},"#"),n(" 概要")],-1),m=s("p",null,"重新设计app引导程序和全局API。",-1),v=s("li",null,[n("全局改变Vue行为的全局API现在被迁移到通过"),s("code",null,"createApp"),n("方法创建的"),s("strong",null,"app示例"),n("上，并且它们的作用只会在app实例中体现。")],-1),g={href:"https://github.com/vuejs/rfcs/pull/22",target:"_blank",rel:"nofollow noopener noreferrer"},h=o(`<h2 id="基础用例" tabindex="-1"><a class="header-anchor" href="#基础用例" aria-hidden="true">#</a> 基础用例</h2><h3 id="之前" tabindex="-1"><a class="header-anchor" href="#之前" aria-hidden="true">#</a> 之前</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>

Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ignoredElements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^app-</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span>
Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span>
Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span>
Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span>

<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">customProperty</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="之后" tabindex="-1"><a class="header-anchor" href="#之后" aria-hidden="true">#</a> 之后</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createApp<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>

app<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">isCustomElement</span> <span class="token operator">=</span> <span class="token parameter">tag</span> <span class="token operator">=&gt;</span> tag<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;app-&#39;</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span><span class="token function-variable function">customProperty</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="动机" tabindex="-1"><a class="header-anchor" href="#动机" aria-hidden="true">#</a> 动机</h2><p>目前Vue中的一些全局API和配置会永远改变全局状态。这会导致一些问题：</p><ul><li><p>在测试时，全局配置很容易偶然污染其他测试用例。用户需要小心存储原始的全局配置，并且在每次测试之后恢复（ 例如：重置<code>Vue.config.errorHandler</code> ）。一些API（例如：<code>Vue.use</code>,<code>Vue.mixin</code>）甚至没有一种途径可以消除它的影响。这使得涉及插件的测试特别棘手。</p><ul><li><code>vue-test-utils</code>必须实现一个特殊的API<code>createLocalVue</code>来处理上述问题</li></ul></li><li><p>在相同页面但是多个不同配置的&quot;app&quot;中，很难共享同一份<code>Vue</code>副本：</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 会影响到所有Vue实例</span>
Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">/* ... */</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> app1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app-1&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app-2&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="详细设计" tabindex="-1"><a class="header-anchor" href="#详细设计" aria-hidden="true">#</a> 详细设计</h2><p>从技术上来说，Vue2并没有&quot;app&quot;这个概念。我们定义的一个app只是通过<code>new Vue()</code>创建的一个简单Vue实例。任何通过相同Vue构造函数创建出得根实例都会共享同一个配置。</p><p>在这个提议中，我们介绍一种新的全局API，<code>createApp</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createApp<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">/* root component definition */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用<code>createApp</code>会返回一个app实例。一个app实例提供一个app上下文。挂载在app实例上的全部组件树共享相同的app上下文，而且提供跟之前Vue2.x全局配置相同的配置。</p><h3 id="全局api映射" tabindex="-1"><a class="header-anchor" href="#全局api映射" aria-hidden="true">#</a> 全局API映射</h3><p>app实例暴露出一个当前全局API的子集。基础的规则是任何全局改变Vue行为的API都迁移到app实例上。这包括：</p><ul><li>全局配置 <ul><li><code>Vue.config</code> 变更为 <code>app.config</code><ul><li>移除<code>config.productionTip</code>。</li><li><code>config.ignoredElements</code> 变更为 <code>config.isCustomElement</code>。</li><li>移除<code>config.keyCodes</code>。</li><li>调整<code>config.optionMergeStrategies</code>的行为</li></ul></li><li>资产注册API（Asset registration APIs） <ul><li><code>Vue.component</code> 变更为 <code>app.component</code>。</li><li><code>Vue.directive</code> 变更为 <code>app.directive</code>。</li></ul></li><li>扩展API的行为（Behavior Extension APIs ） <ul><li><code>Vue.mixin</code> 变更为 <code>app.mixin</code>。</li><li><code>Vue.use</code> 变更为 <code>app.use</code>。</li></ul></li></ul></li></ul>`,17),b=o(`<p>唯一的例外是<code>Vue.extend</code>。因为全局<code>Vue</code>不再是一个新能力的构造函数，<code>Vue.extend</code>作为构造函数的拓展也不再有意义。</p><ul><li>对于继承一个基础组件，应该使用<code>extends</code>选项来替代。</li><li>对于类型系统，使用新的全局API<code>defineComponent</code>。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>defineComponent<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">/* Type inference provided */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是<code>defineComponent</code>实现上没有做任何事情 - 只是简单的返回传入的对象。但是，在Typescript中，返回值具有手写render函数的构造函数的合成类型，通过TSX和IDE工具支持。这种不匹配是一种有意的权衡。</p><h2 id="挂载app实例" tabindex="-1"><a class="header-anchor" href="#挂载app实例" aria-hidden="true">#</a> 挂载app实例</h2><p>app实例可以使用mount函数挂载根实例。与2.x <code>vm.$mount()</code>工作原理类似，并且返回被挂载根组件的实例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> rootInstance <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>mount</code>也接收通过第三个参数传递到根组件实例上的props：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">// 传递给根实例的props</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="与2-x挂载行为不一致的地方" tabindex="-1"><a class="header-anchor" href="#与2-x挂载行为不一致的地方" aria-hidden="true">#</a> 与2.x挂载行为不一致的地方</h3><p>当使用包含编译器的构建版本并挂载一个自身没有template的跟组件，Vue将会尝试使用挂载的目标元素内容作为template。需要注意是3.x和2.x行为上的不同：</p><ul><li>在2.x，根实例使用目标元素的<code>outerHtml</code>作为template，并且整体替换目标元素。</li><li>在3.x，根实例使用目标元素的<code>innerHtml</code>作为template，并且仅替换目标元素中的子节点。</li></ul><p>在大多数用例中，这个改动并不会对你的app行为造成印象，仅有的会造成影响的情况是如果目标元素有多个子节点，根实例将会作为代码片段挂载并且它的<code>this.$el</code> 会指向开始锚点的代码片段（一个DOM注释节点）。</p><p>在Vue3中，由于代码片段的可用性，建议直接使用template直接访问DOM节点而不是依赖<code>this.$el</code>。</p><h2 id="provide-inject" tabindex="-1"><a class="header-anchor" href="#provide-inject" aria-hidden="true">#</a> Provide/Inject</h2><p>一个app实例也可以提供到可由app中的任意组件注入的依赖：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// in the entry</span>
app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token punctuation">[</span>ThemeSymbol<span class="token punctuation">]</span><span class="token operator">:</span> theme
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// in a child component</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">from</span><span class="token operator">:</span> ThemeSymbol
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div :style=&quot;{ color: theme.textColor }&quot; /&gt;</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这在2.x的根实例中的选项类似。</p><h2 id="移除config-productiontip" tabindex="-1"><a class="header-anchor" href="#移除config-productiontip" aria-hidden="true">#</a> 移除<code>config.productionTip</code></h2><p>在3.0中，&quot;使用生产版本构建&quot;的提示只会在使用&quot;开发版本+完整构建&quot;时（包含运行时编译器并有警告的构建版本）出现。</p><p>对于构建ES模块，因为它们与打包器一起使用，并且在多数情况下在生产环境合理配置了CLI或者样板文件，所以这个提示没必要出现。</p><h2 id="config-ignoredelements-变更为-config-iscustomelement" tabindex="-1"><a class="header-anchor" href="#config-ignoredelements-变更为-config-iscustomelement" aria-hidden="true">#</a> <code>config.ignoredElements</code> 变更为 <code>config.isCustomElement</code></h2><p>引入这个选项配置意图是支持原生自定义标签元素，因此这次重命名与他的功能更匹配。这个新选项也是一个函数类型，这可以提供相比之前字符串类型/正则表达式类型更好的灵活性：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// before</span>
Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ignoredElements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;my-el&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^ion-</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span>

<span class="token comment">// after</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">/* ... */</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">isCustomElement</span> <span class="token operator">=</span> <span class="token parameter">tag</span> <span class="token operator">=&gt;</span> tag<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;ion-&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>重要的：</strong> 在3.0，在代码编译阶段移除元素是否为组件的检查，因此这个配置只会在使用运行时编译器生效（译者注：即完整版本）。 如果你使用Vue仅运行时的版本，<code>isCustomElement</code> 必须在构建时传递给<code>@vue/compiler-dom</code> - 例如，传递<code>compilerOptions</code>到<code>vue-loader</code>中。</p><ul><li>如果在使用仅运行时版本的情况下，赋值了<code>config.isCustomElement</code>选项，将会抛出指导用户传递选项到构建配置中的警告。</li><li>这在Vue CLI配置中将是一个新的顶级配置。</li></ul><h2 id="config-optionmergestrategies行为变更" tabindex="-1"><a class="header-anchor" href="#config-optionmergestrategies行为变更" aria-hidden="true">#</a> <code>config.optionMergeStrategies</code>行为变更</h2><p>虽然仍然支持，由于Vue3改变了内部实现，内置选项不再需要合并策略，因此它们不再暴露出来。<code>app.config.optionMergeStrategies</code> 的默认值是一个空对象。这意味着：</p><ul><li>用户必须提供他们自己的合并策略，而不能再复用内置策略（ 例如：你不能再这样使用：<code>config.optionMergeStrategies.custom = config.optionMergeStrategies.props</code>）。</li><li>重写内置选项的合并策略成为不可能。</li></ul><h3 id="附加实例全局共享属性" tabindex="-1"><a class="header-anchor" href="#附加实例全局共享属性" aria-hidden="true">#</a> 附加实例全局共享属性</h3><p>在2.x中，注入全局共享属性到实例上是通过将它们简单添加到<code>Vue.prototype</code>上。</p><p>在Vue3中，因为全局Vue不再是一个构造函数，这也就不再支持上述新增属性方式。相反，共享的实例属性应该添加到实例的<code>config.globalProperties</code> 上：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Before</span>
<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$http</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">// After</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span><span class="token function-variable function">$http</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h2><h3 id="插件自动安装" tabindex="-1"><a class="header-anchor" href="#插件自动安装" aria-hidden="true">#</a> 插件自动安装</h3><p>更多的Vue2.x的库和插件在UMD产物中提供自动安装，例如<code>vue-router</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;https://unpkg.com/vue&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;https://unpkg.com/vue-router&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>依赖<code>Vue.use</code>的自动安装不再可用。这应该是一个相对简单的迁移，并且我们可以为<code>Vue.use</code>公开一个存根并发出警告。</p><h2 id="可选的方案" tabindex="-1"><a class="header-anchor" href="#可选的方案" aria-hidden="true">#</a> 可选的方案</h2><p>N/A</p><h2 id="采取的策略" tabindex="-1"><a class="header-anchor" href="#采取的策略" aria-hidden="true">#</a> 采取的策略</h2><ul><li>这个转换是直接明了的（就像在基础用例中看到的一样）。</li><li>迁移的方法会用抛出指向引导迁移方案的警告来替换。</li><li>提供一个代码模版。</li><li><code>config.ingoredElements</code>会在兼容版本中支持。</li><li><code>config.optionMergeStrategies</code>会在兼容版本中支持内置策略。</li></ul>`,42);function f(x,y){const c=p("ExternalLinkIcon"),e=p("RouterLink");return l(),u("div",null,[d,k,m,s("ul",null,[v,s("li",null,[n("没有改变Vue行为的全局API（例如：nextTick和"),s("a",g,[n("高阶响应式API"),a(c)]),n(" ）现在通过"),a(e,{to:"/vue-ecology/rfcs/0004-global-api-treeshaking.html"},{default:t(()=>[n("具名导出")]),_:1})])]),h,s("p",null,[n("另外没有全局改变行为的全局API现在建议通过"),a(e,{to:"/vue-ecology/rfcs/0004-global-api-treeshaking.html"},{default:t(()=>[n("具名导出")]),_:1}),n("。")]),b])}const A=i(r,[["render",f],["__file","0009-global-api-change.html.vue"]]);export{A as default};
