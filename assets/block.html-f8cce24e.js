import{_ as n,o as s,c as a,b as t}from"./app-a46f6870.js";const p={},e=t(`<h1 id="block-机制" tabindex="-1"><a class="header-anchor" href="#block-机制" aria-hidden="true">#</a> Block 机制</h1><p>前文说到在compile阶段，Vue3通过对动静态分析template输出render函数。</p><p>在renderer阶段调用render生成VNode，那么在生成VNode时又做了哪些优化呢？</p><h2 id="大致流程是什么" tabindex="-1"><a class="header-anchor" href="#大致流程是什么" aria-hidden="true">#</a> 大致流程是什么？</h2><ol><li>调用render</li><li>首先打开一个block，来存放当前block的动态VNode</li><li>根据compile阶段添加的patchFlag以及子节点的类型（是字符串还是数组）来添加不同的信息位</li><li>如果最终集合了子节点的信息<code>patchFlag &gt; 0</code>时则会被推入block中</li><li>将block数组放在根VNode的<code>dynamicChildren</code>属性上</li></ol><h2 id="如何标记信息位" tabindex="-1"><a class="header-anchor" href="#如何标记信息位" aria-hidden="true">#</a> 如何标记信息位？</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
<span class="token comment">// 可以根据template是否有根节点，分为Fragment和根结点</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> PatchFlags <span class="token punctuation">{</span>
    <span class="token comment">// 标记文本内容是动态的</span>
    <span class="token constant">TEXT</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token comment">// 标记class绑定是动态的</span>
    <span class="token constant">CLASS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token comment">// 标记行内style绑定是动态的</span>
    <span class="token constant">STYLE</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token comment">// 标记props是动态的，Vue2中的props和event handler 在Vue3中均归纳为了props</span>
    <span class="token constant">PROPS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token comment">// 标记class、style、props都是动态的，所以diff时直接用新节点替换旧节点</span>
    <span class="token constant">FULL_PROPS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">,</span>
    <span class="token constant">HYDRATE_EVENTS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token constant">STABLE_FRAGMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">,</span>
    <span class="token constant">KEYED_FRAGMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">,</span>
    <span class="token constant">UNKEYED_FRAGMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">,</span>
    <span class="token constant">NEED_PATCH</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">9</span><span class="token punctuation">,</span>
    <span class="token constant">DYNAMIC_SLOTS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token constant">DEV_ROOT_FRAGMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">11</span><span class="token punctuation">,</span>
    <span class="token constant">HOISTED</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token constant">BAIL</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到<code>patchFlag</code>提供了一些枚举，这些枚举值是通过左移计算出的。</p><p>那么为什么要这样设计呢？</p><p>比如小明<code>A</code>是一个不会任何编程语言的程序员，现在市面上有以下集中变成语言：</p><table><tbody><tr><th>PHP</th><th>Python</th><th>Rust</th><th>JavaScript</th><th>Java</th><th>C#</th><th>C++</th><th>C</th></tr><tr><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th></tr></tbody></table><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> xiaoming <span class="token operator">=</span> <span class="token number">0</span>

<span class="token comment">// 当然这样的属性名是不合理的，但是为了更直观的说明才如此声明</span>
<span class="token keyword">const</span> languageFlag <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token constant">C</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;C++&#39;</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;C#&#39;</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span>
    Java<span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">,</span>
    JavaScript<span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">,</span>
    Rust<span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">,</span>
    Python<span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">,</span>
    <span class="token constant">PHP</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">,</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><tbody><tr><td>C</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td style="color:red;">1</td></tr><tr><td>C++</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td style="color:red;">1</td><td>0</td></tr><tr><td>C#</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td style="color:red;">1</td><td>0</td><td>0</td></tr><tr><td>Java</td><td>0</td><td>0</td><td>0</td><td>0</td><td style="color:red;">1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>JavaScript</td><td>0</td><td>0</td><td>0</td><td style="color:red;">1</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>Rust</td><td>0</td><td>0</td><td style="color:red;">1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>Python</td><td>0</td><td style="color:red;">1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>PHP</td><td style="color:red;">1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><p>这时小明通过视频、博客等其他学习途径，熟练掌握了<code>JavaScript</code>，那么</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>xiaoming <span class="token operator">|=</span> languageFlag<span class="token punctuation">.</span>JavaScript
<span class="token comment">// output: xiaoming为 16</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table><tbody><tr><th>PHP</th><th>Python</th><th>Rust</th><th>JavaScript</th><th>Java</th><th>C#</th><th>C++</th><th>C</th></tr><tr><th>0</th><th>0</th><th>0</th><th style="color:red;">1</th><th>0</th><th>0</th><th>0</th><th>0</th></tr></tbody></table><p>这时小明通过视频、博客等其他学习途径，又熟练掌握了<code>Python</code>，那么</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>xiaoming <span class="token operator">|=</span> languageFlag<span class="token punctuation">.</span>Python
<span class="token comment">// output: xiaoming为 80</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><tbody><tr><th>PHP</th><th>Python</th><th>Rust</th><th>JavaScript</th><th>Java</th><th>C#</th><th>C++</th><th>C</th></tr><tr><th>0</th><th style="color:red;">1</th><th>0</th><th style="color:red;">1</th><th>1</th><th>0</th><th>0</th><th>0</th></tr></tbody></table><p>那么如何判断小明具不具备某个编程语言的能力呢？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">if</span> <span class="token punctuation">(</span>xiaoming <span class="token operator">&amp;</span> languageFlag<span class="token punctuation">.</span>Python<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;小明会Python&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;小明不会Python&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>


<span class="token keyword">if</span> <span class="token punctuation">(</span>xiaoming <span class="token operator">&amp;</span> languageFlag<span class="token punctuation">.</span><span class="token constant">C</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;小明会C&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;小明不会C&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// ---- output ----</span>
<span class="token comment">// 小明会Python</span>
<span class="token comment">// 小明不会C</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么只需要通过xiaoming记录的信息，我们便可以轻松的知道他可以熟练使用哪些编程语言。</p><p>回到<code>patchFlag</code>上，通过patchFlag上记录了动态props和子节点的信息，我们就可以轻而易举的知道在diff时，<strong>哪些VNode需要diff</strong>、<strong>需要diff哪些props</strong>。</p><h2 id="举个🌰" tabindex="-1"><a class="header-anchor" href="#举个🌰" aria-hidden="true">#</a> 举个🌰</h2><p>在例子中为了更好理解，我们将标记了注释节点、动态文件节点、元素节点、动态元素节点等</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- comment node --&gt;</span>
    text node{{name}}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>element node<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>dynamic node：{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name?&#39;&#39;:&#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>div<span class="token punctuation">&#39;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name?&#39;&#39;:&#39;&#39;<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name?&#39;&#39;:&#39;&#39;<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript">onClick</span><span class="token punctuation">&quot;</span></span></span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        {{name}}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
                <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name?&#39;&#39;:&#39;&#39;<span class="token punctuation">&quot;</span></span>
                <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name?&#39;&#39;:&#39;&#39;<span class="token punctuation">&quot;</span></span>
                <span class="token special-attr"><span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript">onClick</span><span class="token punctuation">&quot;</span></span></span>
                <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            {{name}}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过compile输出的render函数为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>
    createCommentVNode <span class="token keyword">as</span> _createCommentVNode<span class="token punctuation">,</span>
    toDisplayString <span class="token keyword">as</span> _toDisplayString<span class="token punctuation">,</span>
    createElementVNode <span class="token keyword">as</span> _createElementVNode<span class="token punctuation">,</span>
    normalizeClass <span class="token keyword">as</span> _normalizeClass<span class="token punctuation">,</span>
    normalizeStyle <span class="token keyword">as</span> _normalizeStyle<span class="token punctuation">,</span>
    createTextVNode <span class="token keyword">as</span> _createTextVNode<span class="token punctuation">,</span>
    openBlock <span class="token keyword">as</span> _openBlock<span class="token punctuation">,</span>
    createElementBlock <span class="token keyword">as</span> _createElementBlock
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>

<span class="token keyword">const</span> _hoisted_1 <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span><span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&quot;span&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;element node&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">/* HOISTED */</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> _hoisted_2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;onClick&quot;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> _hoisted_3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> _hoisted_4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">]</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
        <span class="token function">_createCommentVNode</span><span class="token punctuation">(</span><span class="token string">&quot; comment node &quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">_createTextVNode</span><span class="token punctuation">(</span><span class="token string">&quot; text node&quot;</span> <span class="token operator">+</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        _hoisted_1<span class="token punctuation">,</span>
        <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&quot;span&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;dynamic node：&quot;</span> <span class="token operator">+</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&quot;span&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token keyword">class</span><span class="token operator">:</span> <span class="token function">_normalizeClass</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token comment">/* CLASS */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">onClick</span><span class="token operator">:</span> _ctx<span class="token punctuation">.</span>onClick
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token comment">/* PROPS */</span><span class="token punctuation">,</span> _hoisted_2<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token keyword">class</span><span class="token operator">:</span> <span class="token function">_normalizeClass</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token function">_normalizeStyle</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token literal-property property">onClick</span><span class="token operator">:</span> <span class="token string">&quot;onClick&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">title</span><span class="token operator">:</span> _ctx<span class="token punctuation">.</span>name
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
            <span class="token function">_createTextVNode</span><span class="token punctuation">(</span><span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                <span class="token keyword">class</span><span class="token operator">:</span> <span class="token function">_normalizeClass</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token function">_normalizeStyle</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token literal-property property">onClick</span><span class="token operator">:</span> <span class="token string">&quot;onClick&quot;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">title</span><span class="token operator">:</span> _ctx<span class="token punctuation">.</span>name
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">15</span> <span class="token comment">/* TEXT, CLASS, STYLE, PROPS */</span><span class="token punctuation">,</span> _hoisted_4<span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">14</span> <span class="token comment">/* CLASS, STYLE, PROPS */</span><span class="token punctuation">,</span> _hoisted_3<span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Check the console for the AST</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对比后发现，对于静态的节点是直接做了作用域提升来reuse，那么我们接下来debugger跟踪这些函数都做了什么？</p><h3 id="openblock" tabindex="-1"><a class="header-anchor" href="#openblock" aria-hidden="true">#</a> _openBlock</h3><p>这里首先会打开一个block，根据入参为<code>currentBlock</code>赋值并且推入<code>blockStack</code>，这里需要注意两个全局变量：</p><ul><li>blockStack：类型为二维数组<code>[[currentBlock1], [currentBlock2]]</code>，每个item对应currentBlock</li><li>currentBlock：类型为一维数组，用于存放当前block中的dynamic VNode</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 打开一个block，入参默认为false</span>
<span class="token keyword">function</span> <span class="token function">openBlock</span><span class="token punctuation">(</span><span class="token parameter">disableTracking <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    blockStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>currentBlock <span class="token operator">=</span> disableTracking <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="createcommentvnode" tabindex="-1"><a class="header-anchor" href="#createcommentvnode" aria-hidden="true">#</a> _createCommentVNode</h3><p>顾名思义，创建一个注释节点类型的VNode，必定是一个静态节点所以</p>`,35),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","block.html.vue"]]);export{r as default};
