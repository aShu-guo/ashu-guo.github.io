import{_ as a,o as n,c as s,b as t}from"./app-a46f6870.js";const e={},p=t(`<h1 id="准备篇" tabindex="-1"><a class="header-anchor" href="#准备篇" aria-hidden="true">#</a> 准备篇</h1><h2 id="什么是代码片段-fragments" tabindex="-1"><a class="header-anchor" href="#什么是代码片段-fragments" aria-hidden="true">#</a> 什么是代码片段（Fragments）？</h2><p>代码片段在Vue中指多节点的元素，例如：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>你好呀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这在一些用例中很有用（例如table的固定元素结构），而且template结构可以更加灵活的构建。由于Fragments可以支持用户返回多节点的元素，那么组织template时可以将组织逻辑拆分成多个节点，并不需要像v2.x中在外再包裹一层。</p><h2 id="为什么不建议在组件上使用自定义指令" tabindex="-1"><a class="header-anchor" href="#为什么不建议在组件上使用自定义指令" aria-hidden="true">#</a> 为什么不建议在组件上使用自定义指令？</h2><p>在v3中，添加了对代码片段的支持，而且自定义指令也在最终的render函数中成为了props的一部分，那么意味着自定义指令包含在<code>$attrs</code> 中。</p><p>如果在一个包含多个根节点的组件上使用了自定义指令，而在所有的根节点上都没有使用<code>$attrs</code>显式传递，Vue并不知道应该将指令传递给谁。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- hello.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foo</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foo</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bar</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bar</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Hello</span> <span class="token attr-name">v-auth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>auth<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Hello</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>除非在多根节点子组件上显式声明<code>v-bind=&quot;$attrs&quot;</code>。<strong>如果没有显式声明时，自定义指令将会被忽略并且抛出一个警告信息。</strong></p>`,11),c=[p];function l(o,u){return n(),s("div",null,c)}const d=a(e,[["render",l],["__file","0012-prepare.html.vue"]]);export{d as default};
