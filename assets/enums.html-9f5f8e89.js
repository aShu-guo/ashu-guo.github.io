import{_ as n,o as s,c as a,b as e}from"./app-a46f6870.js";const t={},p=e(`<h1 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h1><p>枚举类型是包含一组常量的特殊<code>class</code>，它只有两种形式：<code>string</code> 或者 <code>number</code></p><h2 id="number类型" tabindex="-1"><a class="header-anchor" href="#number类型" aria-hidden="true">#</a> number类型</h2><p>number类型的枚举默认值是从0开始的</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Result <span class="token punctuation">{</span>
    Success<span class="token punctuation">,</span>
    Fail
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 编译之后的</span>
<span class="token keyword">var</span> Result<span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Result<span class="token punctuation">[</span>Result<span class="token punctuation">[</span><span class="token string">&quot;Success&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Success&quot;</span><span class="token punctuation">;</span>
    Result<span class="token punctuation">[</span>Result<span class="token punctuation">[</span><span class="token string">&quot;Fail&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Fail&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Result <span class="token operator">||</span> <span class="token punctuation">(</span>Result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Result: {0: &#39;Success&#39;, 1: &#39;Fail&#39;, Success: 0, Fail: 1}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h3><p>初始化enum上的第一个值，之后的值会依次递增。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Result <span class="token punctuation">{</span>
    Success <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
    Fail
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="完全初始化" tabindex="-1"><a class="header-anchor" href="#完全初始化" aria-hidden="true">#</a> 完全初始化</h3><p>初始化enum中每个属性的值</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Result <span class="token punctuation">{</span>
    Success <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span>
    Fail <span class="token operator">=</span> <span class="token number">500</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="string类型" tabindex="-1"><a class="header-anchor" href="#string类型" aria-hidden="true">#</a> string类型</h2><p>包含string类型的枚举，与number类型的enum使用方式相同，但是由于它具有更好的可读性和含义而更广泛的使用。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Result <span class="token punctuation">{</span>
    Success <span class="token operator">=</span> <span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span>
    Fail <span class="token operator">=</span> <span class="token string">&#39;fail&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>从技术上来说，number类型和string类型可以混合使用，但是这并不建议。</p></div>`,16),c=[p];function i(l,o){return s(),a("div",null,c)}const r=n(t,[["render",i],["__file","enums.html.vue"]]);export{r as default};
