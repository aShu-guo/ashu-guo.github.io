import{_ as e,p as a,q as n,a1 as s}from"./framework-1443a5b1.js";const i={},d=s(`<blockquote><h4 id="mvvm-数据驱动而不是事件驱动" tabindex="-1"><a class="header-anchor" href="#mvvm-数据驱动而不是事件驱动" aria-hidden="true">#</a> MVVM：数据驱动而不是事件驱动</h4></blockquote><p>分为三层：model、view、view-model</p><p>view层展示数据的具体结构，向view-model发送command（ex：用户click按钮、blur...），但是并不知道数据的来源；</p><p>view-model层知道数据的具体结构和执行命令，<strong>提供数据绑定</strong>，但是不知道数据的来源、如何展示；</p><p>model层知道数据的来源，数据的访问层；</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>controller提供逻辑，控制数据的流向，
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>优点：</p><p>1.更像是设计师与开发之间的桥梁</p><p>2.开发只需要关注业务逻辑，</p><p>缺点：</p><p>1.对于简单ui操作，数据绑定的开销是巨大的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span>属性可探测，变动可以感知（vue：响应性）
<span class="token number">2.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,12),l=[d];function t(c,r){return a(),n("div",null,l)}const p=e(i,[["render",t],["__file","MVVM.html.vue"]]);export{p as default};
