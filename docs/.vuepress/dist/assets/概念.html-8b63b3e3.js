import{_ as n,p as s,q as a,a1 as t}from"./framework-1443a5b1.js";const p={},e=t(`<p>1.变量声明使用“types on the left”风格</p><p>例如：const num:number=1</p><p>2.ts具有自动推断功能，&quot;鸭子模型&quot;</p><blockquote><p>interface</p></blockquote><p>描述数据结构</p><p>1.可以声明同名interface，自动合并相同name下的字段</p><p>新增字段方式：声明同名interface 或者 extends</p><p>2.继承使用extends，既可以多继承mixins，也可以多继承</p><p>既可以继承interface，也可以继承type</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>student<span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>type (type alias)</p></blockquote><p>描述类型关系</p><p>1.不能声明同名type</p><p>2.继承使用 &amp;，只能单继承</p><p>既可以继承interface，也可以继承type</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Student</span><span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">Value</span><span class="token operator">=</span><span class="token builtin">string</span><span class="token operator">|</span><span class="token builtin">number</span><span class="token operator">|</span><span class="token keyword">null</span><span class="token operator">|</span><span class="token keyword">undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>array</p></blockquote><p>数组</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span>  or  <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>function</p></blockquote><p>1.具名函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.匿名函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Eve&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

names<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>assertion</p></blockquote><p>也会存在ts并不知道确切类型的情况，使用断言表明这个变量的类型</p><p>1.两种形式（泛型 || as）</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> myCanvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;main_canvas&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLCanvasElement<span class="token punctuation">;</span>

<span class="token keyword">const</span> myCanvas <span class="token operator">=</span> <span class="token operator">&lt;</span>HTMLCanvasElement<span class="token operator">&gt;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;main_canvas&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ts只允许向上转型，或者向下转型；但不允许不可能的转型</span>
<span class="token keyword">const</span> num<span class="token operator">=</span><span class="token string">&#39;hello world&#39;</span> <span class="token keyword">as</span> <span class="token builtin">number</span>
<span class="token comment">// error</span>

<span class="token comment">// 但是也可以通过as any作为中间转换，再转换为其他类型</span>
<span class="token keyword">const</span> age<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">as</span> <span class="token builtin">any</span> <span class="token keyword">as</span> <span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先使用as，第一种方式容易与泛型混淆，而且无法在tsx中使用</p><hr><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">enum</span> LogLevel <span class="token punctuation">{</span>
  <span class="token constant">ERROR</span><span class="token punctuation">,</span>
  <span class="token constant">WARN</span><span class="token punctuation">,</span>
  <span class="token constant">INFO</span><span class="token punctuation">,</span>
  <span class="token constant">DEBUG</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// map中的回调必须return字符串&#39;ERROR&#39;|&#39;WARN&#39;|&#39;INFO&#39;|&#39;DEBUG&#39;</span>
<span class="token operator">&lt;</span>Array<span class="token operator">&lt;</span>keyof <span class="token keyword">typeof</span> LogLevel<span class="token operator">&gt;&gt;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>LogLevel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// map中的回调没有限制</span>
<span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>LogLevel<span class="token punctuation">)</span> <span class="token keyword">as</span> Array<span class="token operator">&lt;</span>keyof <span class="token keyword">typeof</span> LogLevel<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原因？？？</p><hr><p>2.非空断言（null 与 undefined 断言符号 !）</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">liveDangerously</span><span class="token punctuation">(</span>x<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// x既不是null，也不是undefined时去执行toFixed</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>enums</p></blockquote><blockquote><p>any</p></blockquote><p>可能是任何类型，ts忽略类型检查。等同于js</p>`,38),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","概念.html.vue"]]);export{r as default};
