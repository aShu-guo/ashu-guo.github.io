import{_ as a,p as n,q as s,a1 as t}from"./framework-1443a5b1.js";const e={},l=t(`<blockquote><h4 id="编译过程" tabindex="-1"><a class="header-anchor" href="#编译过程" aria-hidden="true">#</a> 编译过程</h4></blockquote><p>由于不同的平台对vue的编译使用的基础方法实现不同，导致不同平台编译vue模板的结果不相同；但是开发者希望在不同的平台上编译出来的模板也是相同的，所以提供了多种options；但是又不希望在相同平台下每次都要传入相同的配置，所以使用了偏函数、闭包的思想</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>偏函数：通过固定一个或多个参数，将一个多元函数变为n-x元函数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://book.penblog.cn/src/img/3.2.png" alt="img"></p><blockquote><h4 id="编译实现" tabindex="-1"><a class="header-anchor" href="#编译实现" aria-hidden="true">#</a> 编译实现</h4></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  {{name}}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>white-block<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>changeNameHandler<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>change!!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>parse方法解析template，输出ast</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1.编译template，生成AST</span>
<span class="token comment">// 2.解析ast，生成render</span>
<span class="token keyword">function</span> <span class="token constant">AST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
  attrsList：会在attrList中移除一些attr；原因是什么？
  
 	*/</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h4 id="template中的ast对象" tabindex="-1"><a class="header-anchor" href="#template中的ast对象" aria-hidden="true">#</a> template中的AST对象</h4></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span><span class="token punctuation">.</span>staticClass<span class="token operator">:</span><span class="token string">&#39;whi&#39;</span>
<span class="token number">2</span><span class="token punctuation">.</span>staticStyle<span class="token operator">:</span>
<span class="token literal-property property">attrs</span><span class="token operator">:</span>
<span class="token literal-property property">on</span><span class="token operator">:</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h4 id="编译逻辑中设计思想" tabindex="-1"><a class="header-anchor" href="#编译逻辑中设计思想" aria-hidden="true">#</a> 编译逻辑中设计思想</h4></blockquote><ul><li>偏函数：入参顺序逐渐从一般到具体；如何设计偏函数？使用场景？</li><li>纯函数：入参一定，出参一定；对外界没有影响</li></ul><blockquote><p>回流和重绘</p></blockquote><ul><li>回流：修改元素尺寸和位置，浏览器重新计算之后再绘制</li><li>重绘：修改元素颜色、背景等，浏览器重新绘制</li></ul><p>回流相对更消耗性能</p>`,15),p=[l];function c(i,o){return n(),s("div",null,p)}const r=a(e,[["render",c],["__file","vue2-模板编译.html.vue"]]);export{r as default};
